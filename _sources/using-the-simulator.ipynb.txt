{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c3c71913",
   "metadata": {},
   "source": [
    "# Using the simulator\n",
    "\n",
    "In this notebook you will learn how to use the simulator to test out methods."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6cdca52",
   "metadata": {},
   "source": [
    "## Setting up a connection with the robot\n",
    "\n",
    "As described in the [basic liquid handling tutorial](basic), we will use the {class}`~pyhamilton.liquid_handling.liquid_handler.LiquidHandler` class to control the robot. This time, however, instead of using the Hamilton {class}`~pyhamilton.liquid_handling.backends.hamilton.STAR` backend, we are using virtual the {class}`~pyhamilton.liquid_handling.backends.simulation.simulation.SimulationBackend` backend. This means that liquid handling will work exactly the same, but the commands are sent to the simulator instead of a real physical robot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7c5a2629",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyhamilton.liquid_handling import LiquidHandler\n",
    "from pyhamilton.liquid_handling.backends.simulation.simulation import SimulationBackend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2e280caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyhamilton.liquid_handling.resources import (\n",
    "    TIP_CAR_480_A00,\n",
    "    PLT_CAR_L5AC_A00,\n",
    "    Cos_96_DW_1mL,\n",
    "    STF_L\n",
    ")\n",
    "\n",
    "sb = SimulationBackend()\n",
    "lh = LiquidHandler(backend=sb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30dcf4a1",
   "metadata": {},
   "source": [
    "Calling {func}`~pyhamilton.liquid_handling.backends.simulation.SimulationBackend.setup` will set up the simulation server and open it in a new browser tab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1419f2b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:websockets.server:server listening on 127.0.0.1:2121\n",
      "INFO:pyhamilton.liquid_handling.backends.simulation.simulation:Simulation server started at http://127.0.0.1:2121\n",
      "INFO:pyhamilton.liquid_handling.backends.simulation.simulation:File server started at http://127.0.0.1:1337\n"
     ]
    }
   ],
   "source": [
    "lh.setup()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "871184ce",
   "metadata": {},
   "source": [
    "For the optimal experience, we recommend that you run the notebook and simulator side by side."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3002429b",
   "metadata": {},
   "source": [
    "![The empty simulator](./img/simulator/empty.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "050ccefd",
   "metadata": {},
   "source": [
    "## Assigning plates and tips\n",
    "\n",
    "With the simulator, {func}`~assigning resources <pyhamilton.liquid_handling.LiquidHandler.assign_resource>` has the additional affect of placing the resources on the simulated deck. They will appear immediately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23c07ba6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car = TIP_CAR_480_A00(name='tip carrier')\n",
    "for i in range(2):\n",
    "    tip_car[i] = STF_L(name=f'tip_{i}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cafa85b6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "lh.assign_resource(tip_car, rails=1, replace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27c1bc2e",
   "metadata": {},
   "source": [
    "When you set or delete subresources in a {class}`~pyhamilton.liquid_handling.resources.abstract.Carrier`, that will immediately be reflected in the UI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "628d9133",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "tip_car[2] = STF_L(name=f'tip_{2}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b8eedee6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[3] = STF_L(name=f'tip_{3}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "935a2c25",
   "metadata": {},
   "outputs": [],
   "source": [
    "del tip_car[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b753686a",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[4] = STF_L(name=f'tip{4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fdf9441f",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[4] = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00c1c929",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[3] = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "953f2da1",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[3] = STF_L(name=f'tip_{3}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0c842523",
   "metadata": {},
   "outputs": [],
   "source": [
    "tip_car[4] = STF_L(name=f'tip_{4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "727936f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt_car = PLT_CAR_L5AC_A00(name='pre')\n",
    "for i in range(5):\n",
    "    plt_car[i] = Cos_96_DW_1mL(name=f'plate_{i}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b676a360",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.assign_resource(plt_car, rails=9, replace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21835f31",
   "metadata": {},
   "source": [
    "![The simulator after the resources have been assigned](./img/simulator/assignment.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a9721b",
   "metadata": {},
   "source": [
    "## Build the deck layout: placing resources\n",
    "\n",
    "Where you would manually place the resources like tips and liquid on the deck when using a physical system, with the Simulator you can add them using code."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daf99520",
   "metadata": {},
   "source": [
    "### Tips\n",
    "\n",
    "Let's {func}`~pyhamilton.liquid_handling.backends.simulation.SimulationBackend.fill_tips` the tip containers at locations `0` and `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ca3152d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.fill_tips(tip_car[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "346c8e43",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.fill_tips(tip_car[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "225196f2",
   "metadata": {},
   "source": [
    "When you no longer need tips, use {func}`~pyhamilton.liquid_handling.backends.simulation.SimulationBackend.remove_tips` to remove them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f574b8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.fill_tips(tip_car[4])\n",
    "sb.remove_tips(tip_car[4], pattern=[[True]*6 + [False]*6]*8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8e1ed1e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.place_tips(tip_car[3], pattern=[[True, False]*6]*8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "579da35b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.place_tips(tip_car[2], pattern=[[True, True, False, False]*3]*8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "594d8016",
   "metadata": {},
   "source": [
    "### Liquids\n",
    "\n",
    "Adding liquid to wells works similarly. You can use {func}`~pyhamilton.liquid_handling.backends.simulation.SimulationBackend.adjust_well_volume` to adjust the volume of individual wells in each resource. Note that the opacity of the well matches the volume of the well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3cf87c52",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.adjust_well_volume(plt_car[2], pattern=[[100, 800]*6]*8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5b76aac2",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.adjust_well_volume(plt_car[1], pattern=[[1000]*12]*8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "205e2625",
   "metadata": {},
   "outputs": [],
   "source": [
    "sb.adjust_well_volume(plt_car[0], pattern=[[0]*12]*8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66a27cfc",
   "metadata": {},
   "source": [
    "![Simulator after the tips have been placed and the volumes adjusted](./img/simulator/resources.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27af93d8",
   "metadata": {},
   "source": [
    "## Liquid handling\n",
    "\n",
    "Once the layout is complete, you can run the same commands as described in the [basic liquid handling tutorial](basic)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c3f2cd",
   "metadata": {},
   "source": [
    "### Picking up tips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f97eadd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.pickup_tips('tip_0', \"A1\", \"B2\", \"C3\", \"D4\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bf46e476",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.discard_tips('tip_0', \"A1\", \"B2\", \"C3\", \"D4\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6948b2",
   "metadata": {},
   "source": [
    "### Aspirating and dispensing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "947977c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.pickup_tips('tip_0', \"A1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c25a147f",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.aspirate(plt_car[2], (\"A2\", 300))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e86428ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.dispense(plt_car[4], (\"A2\", 300))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "70117e04",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.discard_tips('tip_0', \"A1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a8b3d59",
   "metadata": {},
   "source": [
    "### Aspirating using CoRe 96\n",
    "\n",
    "The CoRe 96 head supports liquid handling operations for 96 channels at once. Here's how to use:\n",
    "\n",
    "- {func}`~pyhamilton.liquid_handling.LiquidHandler.pickup_tips96` for picking up 96 tips;\n",
    "- {func}`~pyhamilton.liquid_handling.LiquidHandler.aspirate96` for aspirating liquid from the deck, where the `pattern` array controls which wells are aspirated from;\n",
    "- {func}`~pyhamilton.liquid_handling.LiquidHandler.dispense96` for dispensing liquid to the deck, where the `pattern` array controls which wells are dispensed to, and;\n",
    "- {func}`~pyhamilton.liquid_handling.LiquidHandler.discard_tips96` for discarding tips to the resource.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b8c5706d",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.pickup_tips96(tip_car[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c09144c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.aspirate96(plt_car[1], [[True] * 12] * 8, volume=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2ba711bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.dispense96(plt_car[0], [[True] * 12] * 8, volume=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "59d3dae1",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.aspirate96(plt_car[1], \"A1:H12\", volume=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f506c35c",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.dispense96(plt_car[0], \"A1:H12\", volume=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6d205ea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "lh.discard_tips96(tip_car[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cc77505",
   "metadata": {},
   "source": [
    "![The simulator after the liquid handling operations completed](./img/simulator/after_lh.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e49020a5",
   "metadata": {},
   "source": [
    "## Shutting down\n",
    "\n",
    "When you're done, remember to shut down the simulator by calling {func}`~pyhamilton.liquid_handling.LiquidHandler.stop`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "44a61431",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:websockets.server:server closing\n",
      "INFO:websockets.server:connection closed\n"
     ]
    }
   ],
   "source": [
    "lh.stop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "vscode": {
   "interpreter": {
    "hash": "144ec50570006c78c95fcbf03daf60eaeab01aab98729d454cf125bd413b5e53"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
